var path = require('path');

function updateManifestDeploymentBlockUri(oManfiestDeploymentBlock, sAppFolderPathInProject) {
    if (oManfiestDeploymentBlock.uri !== null) {
        var sManifestUri = oManfiestDeploymentBlock.uri; //current uri in manifest
        if ((sAppFolderPathInProject) && sAppFolderPathInProject !== "") { //when source folder empty (root) - no update needed (paths within target and source are the same)
            var indexOfSourceFolder = sManifestUri.lastIndexOf(sAppFolderPathInProject); //verify the specified src folder exist in current uri
            if (indexOfSourceFolder !== -1) {
                var sUriPrefix = sManifestUri.substring(0, indexOfSourceFolder); //uri prefix before the source folder path (keep the '/' before the src path)
                var sUpdatedUri = sUriPrefix; //includes the previous prefix (e.g abap path to the application) and the rest is the manifest path within target
                oManfiestDeploymentBlock.uri = sUpdatedUri;
            }
        }
    }
    else{
        throw new Error("devxUpdateManifest - no uri defined in manifest.json file");
    }
};

function  updateManifestDatasourceUri(oManfiestApplicationBlock, grunt) {
    if (oManfiestApplicationBlock && oManfiestApplicationBlock.dataSources) {
        for(sDataSourceName in oManfiestApplicationBlock.dataSources){
            var oDataSource = oManfiestApplicationBlock.dataSources[sDataSourceName];
            if(oDataSource.uri && oDataSource.uri != null){
                if(oDataSource.uri[0] === "/"){
                    oDataSource.uri = oDataSource.uri.substring(1);
                }
            } else{
                grunt.log.warn("devxUpdateManifest - datasource.uri attribute in the manifest.json file was not found or incorrect. Therefore, update this attribute to be reletive uri is irrelevant.");
            }
        }
    } else {
        grunt.log.warn("devxUpdateManifest - datasource.uri attribute in the manifest.json file was not found or incorrect. Therefore, update this attribute to be reletive uri is irrelevant.");
    }
};

function updateManifestFile(grunt, srcFolder, appFolder, destDir){
    var sManifestFile = path.join(appFolder, "manifest.json");
    var bManifestExists = grunt.file.exists(sManifestFile);
    if (bManifestExists){
        var oManifestJsonContent = grunt.file.readJSON(sManifestFile);
        var sAppFolderRelativePath = path.relative(srcFolder, appFolder);
        if (oManifestJsonContent["sap.platform.hcp"]) {
            updateManifestDeploymentBlockUri(oManifestJsonContent["sap.platform.hcp"], sAppFolderRelativePath);
        }
        if (oManifestJsonContent["sap.platform.abap"]) {
            updateManifestDeploymentBlockUri(oManifestJsonContent["sap.platform.abap"], sAppFolderRelativePath);
        }
        // get deploy_mode flag from the Gruntfile.js of the module - will be exist only in case of html repo scenario
        var deployMode = grunt.config.get("deploy_mode");
        if (deployMode === "html_repo") {
            updateManifestDatasourceUri(oManifestJsonContent["sap.app"], grunt);
        }
        grunt.file.write(path.join(destDir, "manifest.json"), JSON.stringify(oManifestJsonContent));
    }
    else{
        throw new Error("devxUpdateManifest - no manifest.json file found in project");
    }
};

function validateTaskOptions(grunt, task, taskOptions) {
    if (!taskOptions.src) {
        grunt.log.error(task.name + ' missing src configuration');
        return false;
    }
    if (!taskOptions.dest) {
        grunt.log.error(task.name + ' missing dest configuration');
        return false;
    }
    if (!taskOptions.app) {
        grunt.log.error(task.name + ' missing app configuration');
        return false;
    }
    return true;
}

function getGruntConfiguredOptions(grunt) {
    return {
        src: grunt.config.get('dir.projectRoot'),
        app: grunt.config.get('dir.appFolder'),
        dest: grunt.config.get('dir.dist')
    }
}

module.exports = function(grunt) {
    grunt.registerTask('devxUpdateManifest', 'Update manifest.json for build', function () {
        //get tasks configured options or set default if not exists
        var originOptions = this.options(getGruntConfiguredOptions(grunt));
        var _options = originOptions;
        try {
            if (validateTaskOptions(grunt, this, _options)) {
                updateManifestFile(grunt, _options.src, _options.app, _options.dest);
            }
        } catch(e) {
            grunt.log.error('failed to update manifest.json file ' + e.message);
        }
    });
}
