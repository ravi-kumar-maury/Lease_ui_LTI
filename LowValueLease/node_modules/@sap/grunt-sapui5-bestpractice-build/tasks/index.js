'use strict';
var fs = require('fs');
var path = require('path');

function getAppFolder(projectRoot, relativeComponentDir) {
    return path.join(projectRoot, relativeComponentDir);
}

// returns the path of the folder that holds the Component.js file relatively to the root folder
//  or '.' if file is under the root folder. The function will return null if file is not found
function getRelativeComponentFolder(rootPath, curPath) {
    var relativePath = path.relative(rootPath, curPath);
    var baseName = path.basename(curPath);
    if (fs.lstatSync(curPath).isDirectory()) {
        if (baseName === 'node_modules' || baseName === 'dist') {
            return null;//don't look under node_modules and dist folders
        } else {
            var testFilePath = path.join(curPath, 'Component.js')
            if (fs.existsSync(testFilePath)) {
                return relativePath || ".";
            }
            var files = fs.readdirSync(curPath);
            for(var i=0; i < files.length; i++) {
                var file = files[i];
                var componentPath = getRelativeComponentFolder(rootPath, path.join(curPath, file));
                if (componentPath) {
                    return componentPath;
                }
            }
        }
    }
    return null;
}

module.exports = function(grunt) {

    function getComponentDir(){
        var sRes = '<%= pkg.name %>';
        var sComponentFile = path.join(relativeComponentDir,'Component.js');
        if (grunt.file.exists(sComponentFile)){
            var fileContent = grunt.file.read(sComponentFile);
            var sReg  = '.extend\\(\\"(.*).';
            var oRegex = new RegExp(sReg + 'Component\\"');
            var aMatches = oRegex.exec(fileContent);
            if (aMatches) {
                sRes = aMatches[1];
                sRes = sRes.replace(/\./g, '/');
            }
        }
        return sRes;
    }

    function getProjectRoot() {
        return grunt.option('gruntfile') ? path.dirname(grunt.option('gruntfile')) : process.cwd();
    }

    var projectRoot = getProjectRoot();
    // checks if the 'Component.js' file is in the root folder
    var relativeComponentDir = getRelativeComponentFolder(projectRoot, projectRoot);
    var bIsComponentUnderRoot = relativeComponentDir === '.';

    // list of files that should be packaged into the component-preload.js file (for projects in the new structure - webapp)
    var preloadSources = [
        '**/*.js',
        '**/changes-bundle.json',
        '**/*.fragment.html',
        '**/*.fragment.json',
        '**/*.fragment.xml',
        '**/*.view.html',
        '**/*.view.json',
        '**/*.view.xml',
        '**/*.properties',
        'manifest.json',
        '!**/node_modules/**',
        '!**/test/**',
        '!**/localService/**'
    ];

    // list of files that should be copied from the webapp folder. Exclude: node_modules, test, localService folders and test.html file
    var copyAppFilesToTmp = [
        '**/*.*',
        '!**/node_modules/**',
        '!**/test/**',
        '!**/localService/**',
        '!test.html'
    ];

    // list of files from application root folder
    var projectRootSources = [
        'xs-app.json',
        'neo-app.json'
    ];

    // list of files that will be converted to dbg files (add -dbg postfix)
    var dbgSources = [
        '**/*.js',
        '!**/node_modules/**',
        '!**/test/**',
        '!**/localService/**'
    ];

    // list of files that should be packaged into the component-preload.js file (for projects in the old structure - no webapp folder)
    var preloadRootProjectSources = [
        '**/*.js',
        '**/*.fragment.html',
        '**/*.fragment.json',
        '**/*.fragment.xml',
        '**/*.view.html',
        '**/*.view.json',
        '**/*.view.xml',
        '!**/node_modules/**',
        '!**/test/**',
        '!**/localService/**',
        '!test.html',
        '!neo-app.json'
    ];

    grunt.initConfig({

        pkg: grunt.file.readJSON('package.json'),
        compatVersion: "edge",
		dir: {
            bIsComponentUnderRoot: bIsComponentUnderRoot,
            projectRoot: projectRoot,
		    appFolder: getAppFolder(projectRoot, relativeComponentDir),
            dist: path.join(projectRoot, 'dist'),
            componentRoot: getComponentDir(),
            tmpDir : path.join(projectRoot, 'dist', 'tmp'),
            tmpDirDbg : path.join(projectRoot, 'dist', 'tmp-dbg')
        },

        openui5_preload: {
            preloadDbg: {
                options: {
                    resources: {
                        cwd:  '<%= dir.tmpDirDbg %>',
                        src: dbgSources,
                        prefix: '<%= dir.componentRoot %>'
                    },
                    compress: false,
                    dest:  '<%= dir.tmpDirDbg %>',
                    compatVersion: '<%= compatVersion %>' // creates jQuery.sap.register...
                },
                components: true
            },
            preloadTmp: {
                options: {
                    resources: {
                        cwd: '<%= dir.tmpDir %>',
                        src: preloadSources,
                        prefix: '<%= dir.componentRoot %>'
                    },
                    compress: {
                        uglifyjs: {
                            mangle: true,
                            output: {
                                comments: false
                            }
                        }
                    },
                    dest: '<%= dir.tmpDir %>',
                    compatVersion: '<%= compatVersion %>' // creates jQuery.sap.register...
                },
                components: true
            },
            preloadRootProject: {
                options: {
                    resources: {
                        cwd:  '<%= dir.appFolder %>',
                        src: preloadRootProjectSources,
                        prefix: '<%= dir.componentRoot %>'
                    },
                    compress: {
                        uglifyjs: {
                            output: {
                                comments: false
                            }
                        }
                    },
                    dest:  '<%= dir.appFolder %>',
                    compatVersion: '<%= compatVersion %>' // creates jQuery.sap.register...
                },
                components: true
            }
        },

        clean: {
            dist: '<%= dir.dist %>/'
        },

        copy: {
            copyProjectFilesToDist: {
                files: [
                    {
                        expand: true,
                        src: projectRootSources,
                        dest:'<%= dir.dist %>',
                        cwd: '<%= dir.projectRoot %>'
                    }]
            },
            copyToDbg: {
                files: [
                    {
                        expand: true,
                        src: dbgSources,
                        dest: '<%= dir.tmpDirDbg %>',
                        cwd: '<%= dir.appFolder %>',
                        filter: function(filepath) {
                            // prevent js from localService to be copied
                            return !filepath.match(new RegExp('<%= dir.appFolder %>' + '(\\/|\\\\)localService', 'gi'));
                        }
                    },
                    {
                        expand: true,
                        src: '**/*.css',
                        dest: '<%= dir.tmpDirDbg %>',
                        cwd: '<%= dir.appFolder %>'
                    }
                ]
            },
            copyToTmp: {
                files: [
                    {
                        expand: true,
                        src: copyAppFilesToTmp,
                        dest: '<%= dir.tmpDir %>',
                        cwd: '<%= dir.appFolder %>'
                    },
                    {
                        expand: true,
                        src: '**/*.css',
                        dest: '<%= dir.tmpDir %>',
                        cwd: '<%= dir.appFolder %>'
                    }]
            },
            copyDbgToDist: {
                files: [
                    {
                        expand: true,
                        src: dbgSources,
                        dest:'<%= dir.dist %>',
                        cwd: '<%= dir.tmpDirDbg %>',
                        rename: function(dest, src) {
                            return dest + '/' + src.replace(/((\.view|\.fragment|\.controller)?\.js)/, '-dbg$1');
                        }
                    },
                    {
                        expand: true,
                        src: '**/*.css',
                        dest: '<%= dir.dist %>',
                        cwd: '<%= dir.tmpDirDbg %>',
                        rename: function(dest, src) {
                            return dest + '/' + src.replace('.css', '-dbg.css');
                        }
                    }]
            },
            copyTmpToDist: {
                files: [
                    {
                        expand: true,
                        src: 'Component-preload.js',
                        dest: '<%= dir.dist %>',
                        cwd: '<%= dir.tmpDir %>'
                    },
                    {
                        expand: true,
                        src: '**/*',
                        dest: '<%= dir.dist %>',
                        cwd: '<%= dir.tmpDir %>'
                    }]
            }
        },
        mkdir: {
            dist: {
                options: {
                    create: ['<%= dir.dist %>']
                }
            }
        },
        'cssmin': {
            build: {
                files: [
                    {
                        expand: true,
                        src: '**/*.css',
                        dest: '<%= dir.dist %>',
                        cwd: '<%= dir.appFolder %>'
                    }]
            }
        },
        'uglify': {
            uglifyTmp: {
                files: [
                    {
                        expand: true,
                        src: '**/*.js',
                        dest: '<%= dir.tmpDir %>',
                        cwd: '<%= dir.appFolder %>',
                        filter: function(filepath) {
                            // prevent js from localService to be copied
                            return !filepath.match(new RegExp('<%= dir.appFolder %>' + '(\\/|\\\\)localService', 'gi'));
                        }
                    }]
            },
            uglifyPreload: {
                files: [
                    {
                        expand: true,
                        src: path.join('<%= dir.tmpDir %>', 'Component-preload.js')
                    }]
            },
            uglifyRootPreload: {
                files: [
                    {
                        expand: true,
                        src: path.join('<%= dir.appFolder %>', 'Component-preload.js')
                    }]
            }
        },
        createManifestBundle: {
            options: {
                src: '<%= dir.tmpDir %>',
                dest: '<%= dir.dist %>'
            }
        },
        bundleChanges: {
            options: {
                src: '<%= dir.appFolder %>',
                dest: '<%= dir.tmpDir %>'
            }
        },
        cleanupChanges: {
            options: {
                src: '<%= dir.dist %>'
            }
        },
        devxUpdateManifest: {
            options: {
                src: '<%= dir.projectRoot %>',
                app: '<%= dir.appFolder %>',
                dest: '<%= dir.tmpDir %>'
            }
		},
		devxUpdateNeoApp: {
			options: {
				src: '<%= dir.projectRoot %>',
                app: '<%= dir.appFolder %>',
				dest: '<%= dir.dist %>'
			}
		},
		createsCachebusterInfoJson: {
            options: {
                src: '<%= dir.bIsComponentUnderRoot ? dir.projectRoot : dir.dist %>',
                dest: '<%= dir.bIsComponentUnderRoot ? dir.projectRoot : dir.dist %>'
            }
        },
		createResourcesJson: {
            options: {
                src: '<%= dir.bIsComponentUnderRoot ? dir.projectRoot : dir.appFolder %>',
                dest: '<%= dir.bIsComponentUnderRoot ? dir.projectRoot : dir.dist %>'
            }
		}

    });

    grunt.loadNpmTasks('grunt-contrib-clean');
    grunt.loadNpmTasks('grunt-contrib-copy');
    grunt.loadNpmTasks('grunt-contrib-uglify');
    grunt.loadNpmTasks('grunt-contrib-cssmin');
    grunt.loadNpmTasks('grunt-mkdir');
    grunt.loadNpmTasks('grunt-openui5');

    grunt.registerTask('cleanTmp', 'Clean temp data created during the build', function() {
        //delete temp and debug dir
        grunt.file.delete(grunt.config.data.dir.tmpDirDbg);
        grunt.file.delete(grunt.config.data.dir.tmpDir);
    });

// Build task - build will vary according to the location of the component.js file
// If the component.js is under the root - the build will not create a dist folder.
// In any other case - a dist file will be created.
    if(bIsComponentUnderRoot) {
        grunt.registerTask('build', [
            'openui5_preload:preloadRootProject',
            'uglify:uglifyRootPreload',
            'cleanTmp',
            'createsCachebusterInfoJson',
            'createResourcesJson'
        ]);
    } else {
        grunt.registerTask('build', [
            'bundleChanges',                    // Task to bundle level-0-changes
            'copy:copyToTmp',                   // Copy all project files to dist/tmp
            'devxUpdateManifest',               // Look for manifest.json file in dist folder. According to deployment mode (ABAP/HCP), update the deployment block Uri. In case of HTML5 repo scenario - update the datasorce.url to be relative
            'cssmin',                           // Minify all css files that under the dist folder
            'openui5_preload:preloadTmp',       // Task to merge multiple files into one preload file (Component-preload.js). All the files that defined under preloadSources.
            'copy:copyToDbg',                   // Copy JS and CSS files to dist/tmp-dbg
            'copy:copyDbgToDist',               // Copy all JS and CSS files from dist/tmp-dbg to dist folder and add to each file suffix "-dbg"
            'copy:copyProjectFilesToDist',      // Copy all files from project root to dist
            'uglify:uglifyPreload',             // Uglify the "Component-preload.js" file
            'copy:copyTmpToDist',               // Copy all files from dist/tmp folder including the "Component-preload.js" file to dist folder
            'devxUpdateNeoApp',                 // Update neo-app for build - remove app folder prefix (like: /webapp) from routes and welcome file in the neo-app.json file. At the end copy the new created neo-app.json file to dist folder.
            'createManifestBundle',             // Creates manifest bundle zip file
            'cleanTmp',                         // Clean dist/tmp and dist/tmp-dbg folders
            'createsCachebusterInfoJson',       // Creates sap-ui-cachebuster-info.json file that contains the name and last modified time of each file under the dist folder
            'cleanupChanges',                   // 0-level changes - Task to delete level-0-changes in dist folder
            'createResourcesJson'               // Create resource.json file that contains the paths of all the files in the project
        ]);
    }
};
