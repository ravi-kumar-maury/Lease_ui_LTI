@Library('piper-lib') _
@Library('features-pipeline-lib') __
@Library('piper-lib-os') ___
import com.sap.icd.jenkins.Utils

piperUtils = new Utils()


stage("Run tests") {
	node(){
		checkout scm;
		echo "Running voter on commitId ${piperUtils.getGitCommitId()}"
	}
	parallel(
        'Whitesource_scan': {
            node {
                timestamps {
                    ansiColor('xterm') {
                        checkout scm;
    		   	executeWhitesourceScan script: this, scanType: 'npm', whitesourceUserTokenCredentialsId: 'whitesourceKey', dockerImage: 'node:9.11.2'
		    }
                }
            }
        },
		'devx-grunt-voter': {
			devxPodTemplate() {
				timestamps {
					ansiColor('xterm') {
						checkout scm;
						echo "retrieving git structure from repository"
						def gitUrl = piperUtils.getGitRemoteUrl()
						def githubRepoName = piperUtils.getRepositoryFromGitUrl(gitUrl)
						try {
							// missing coverage report
							sh """
									./setup-env.sh;
									grunt devx-grunt-build-voter;
								"""
                        } catch (e) {
							error  "devx-grunt-build-voter step failed with error: " + e.toString()
						} finally {
							junit testDataPublishers: [[$class: 'AttachmentPublisher'], [$class: 'StabilityTestDataPublisher']], testResults: '**/*-*.xml';
							archive "**/*-*.xml; //, coverage/${env.BRANCH_NAME}_coverage.json";
							//publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: "coverage/${githubRepoName}", reportFiles: 'index.html', reportName: 'Code Coverage', reportTitles: '']);
						}
					}
				}
			}
		},
		'devx-grunt_validations': {
			devxPodTemplate() {
				timestamps {
					ansiColor('xterm') {
						checkout scm;
						// missing CheckStyle XML
						try {
							sh "./setup-env.sh; grunt validations";
						}
						finally {
							checkstyle canComputeNew: false, canRunOnFailed: true, defaultEncoding: '', healthy: '', pattern: '**/target/eslint.xml', unHealthy: '', unstableTotalHigh: '1';
						}
					}
				}
			}
		}
	)
}

