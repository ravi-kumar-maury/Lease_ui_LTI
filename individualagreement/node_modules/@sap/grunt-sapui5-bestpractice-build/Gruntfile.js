module.exports = function(grunt) {
    "use strict";

    grunt.initConfig({
        eslint: {
            src: [
                "tasks/**/*.js"
            ],
            options: {
                configFile: "cfg/eslint.json",
                outputFile: "target/eslint.xml"
            }
        },
        clean: {
            mtaDummy: {
                src: ['./test/dummy/mtaDummy/CrudModule/node_modules', './test/dummy/mtaDummy/CrudModule/dist', './test/dummy/mtaDummy/CrudModule/package-lock.json']
            },
            mtaDummyRepo: {
                src: ['./test/dummy/mtaDummyRepo/CrudModule/node_modules', './test/dummy/mtaDummyRepo/CrudModule/dist', './test/dummy/mtaDummyRepo/CrudModule/package-lock.json']
            },
            es6_project: {
                src: ['./test/dummy/ES6_Project/node_modules', './test/dummy/ES6_Project/dist', './test/dummy/ES6_Project/package-lock.json']
            },
            es6_project_ui5_152: {
                src: ['./test/dummy/ES6_Project_ui5_152/node_modules', './test/dummy/ES6_Project_ui5_152/dist', './test/dummy/ES6_Project_ui5_152/package-lock.json']
            },
            webapp: {
                src: ['./test/dummy/webappNewStructure/node_modules', './test/dummy/webappNewStructure/dist', './test/dummy/webappNewStructure/package-lock.json']
            }
        },
        shell: {
            setupIntegrationTests: {
                command: [
                    'npm run createtar',
                    'npm run renametar'
                ].join('&&')
            },
            coverage: {
                command: 'npm run coverage'
            }
        },
        auto_install: {
            mtaDummy: {
                options: {
                    cwd: './test/dummy/mtaDummy/CrudModule',
                    stderr: false,
                    failOnError: true,
                    npm: "--no-package-lock"
                }
            },
            webapp: {
                options: {
                    cwd: './test/dummy/webappNewStructure',
                    stderr: false,
                    failOnError: true,
                    npm: "--no-package-lock"
                }
            },
            mtaDummyRepo: {
                options: {
                    cwd: './test/dummy/mtaDummyRepo/CrudModule',
                    stderr: false,
                    failOnError: true,
                    npm: "--no-package-lock"
                }
            },
            es6_project: {
                options: {
                    cwd: './test/dummy/ES6_Project',
                    stderr: false,
                    failOnError: true,
                    npm: "--no-package-lock"
                }
            },
            es6_project_ui5_152: {
                options: {
                    cwd: './test/dummy/ES6_Project_ui5_152',
                    stderr: false,
                    failOnError: true,
                    npm: "--no-package-lock"
                }
            }
        },
        mochaTest: {
            integrations: {
                options: {
                    reporter: 'mocha-junit-reporter',
                    reporterOptions: {
                        mochaFile: 'testResults/TESTIntegrations-index.xml'
                    },
                    colors: true,
                    summery: true,
                    captureFile: 'testResults/outputIntegrations.txt', // Optionally capture the reporter output to a file
                    quiet: false, // Optionally suppress output to standard out (defaults to false)
                    clearRequireCache: false // Optionally clear the require cache before running tests (defaults to false)
                },
                src: ['test/*Integration.js']
            },
            units: {
                options: {
                    reporter: 'mocha-junit-reporter',
                    reporterOptions: {
                        mochaFile: 'testResults/TESTunits-index.xml'
                    },
                    colors: true,
                    summery: true,
                    captureFile: 'testResults/outputUnits.txt', // Optionally capture the reporter output to a file
                    quiet: false, // Optionally suppress output to standard out (defaults to false)
                    clearRequireCache: false // Optionally clear the require cache before running tests (defaults to false)
                },
                src: ['test/*Spec.js']
            }
        }
    });

    grunt.loadNpmTasks('grunt-auto-install');
    grunt.loadNpmTasks('grunt-mocha-test');
    grunt.loadNpmTasks("gruntify-eslint");
    grunt.loadNpmTasks('grunt-shell');
    grunt.loadNpmTasks('grunt-contrib-clean');

    grunt.registerTask('validations', [
        'eslint'
    ]);

    grunt.registerTask('unitTests', [
        'mochaTest:units'
    ]);

    grunt.registerTask('integrationTests', [
        'clean',
        'shell:setupIntegrationTests',
        'auto_install:webapp',
        'auto_install:mtaDummy',
        'auto_install:mtaDummyRepo',
        'auto_install:es6_project',
        'auto_install:es6_project_ui5_152',
        'mochaTest:integrations'
    ]);

    grunt.registerTask('devx-grunt-build-voter', [
		'integrationTests',
		'shell:coverage',
        'unitTests'
    ]);

    grunt.registerTask('default', [
        'devx-grunt-build-voter',
        'validations'
    ]);
};