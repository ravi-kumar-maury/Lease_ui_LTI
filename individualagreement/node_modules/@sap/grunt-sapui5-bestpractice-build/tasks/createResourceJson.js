var path = require('path');
var fs = require('fs');

// Creates or updates the resource.json file with the paths of all the files in the project
var resources;
var _RESOURCES_FILE = "resources.json";

function createResourceJson(srcFolder, distFolder) {
	resources = [];
	var sJsonContent = {};
	var jsonContent;
	createResource(srcFolder, srcFolder);
	sJsonContent.resources = resources;
	jsonContent = JSON.stringify(sJsonContent, null, 4);
	fs.writeFileSync(path.join(distFolder, _RESOURCES_FILE), jsonContent);
}

function getResolvedPathForServer(originPath) {
    return originPath.replace(new RegExp('\\' + path.sep, 'g'), '/');
}

// Adds files to resources array in order to create / update the resource.json file
function createResource (srcFolder, currentFolder) {
	var files = fs.readdirSync(currentFolder);
	for (var i = 0; i < files.length; i++) {
        var resource = {};
        var fileName = files[i];
        var sSuffix = path.extname(path.join(currentFolder, fileName));
        var filePath = path.join(currentFolder, fileName);
        if (fileName != 'dist' && fileName != 'node_modules' && fs.lstatSync(filePath).isDirectory()) {
            createResource(srcFolder, filePath);
        }
        else {
            var relativeFileName = path.relative(srcFolder, filePath);
            resource.name = getResolvedPathForServer(relativeFileName)

            if (fileName === "Component-preload.js" || fileName === _RESOURCES_FILE) {
                resource.merged = true;
            }

            if (sSuffix === ".properties" && fileName.indexOf("i18n") > -1) {
                resource.raw = getResolvedPathForServer(path.join("i18n", "i18n.properties"));
            }

            else if (sSuffix === ".properties" && fileName.indexOf("messageBundle") > -1) {
                resource.raw = "messageBundle.properties";
            }

            if (resource.raw) {
                var start = fileName.indexOf("_");
                var end = fileName.indexOf(".properties");
                if (start > -1 && end > -1) {
                    resource.locale = fileName.substring(start, end);
                }
            }

            if (fileName.indexOf("-dbg") > 0) {
                resource.isDebug = true
            }

            resources.push(resource);
        }
    }
};

function validateTaskOptions(grunt, task, taskOptions) {
    if (!taskOptions.src) {
        grunt.log.error(task.name + ' missing src configuration');
        return false;
    }
    if (!taskOptions.dest) {
        grunt.log.error(task.name + ' missing dest configuration');
        return false;
    }
    return true;
}

function getGruntConfiguredOptions(grunt) {
    return {
        src: grunt.config.get('dir.projectRoot'),
        dest: grunt.config.get('dir.dist'),
        parentDir: grunt.config.get('dir.parentDir')
    }
}

function getTaskOptions(originOptions) {
    var srcFolder = originOptions.src;
    var destDir = originOptions.dest;

    //For backward compatibility
    if (originOptions.parentDir) {
        if (originOptions.parentDir === ".") {
            destDir = originOptions.src;
        } else {
            srcFolder = originOptions.dest;
        }
    }
    return {
        src: srcFolder,
        dest: destDir
    };
}

module.exports = function(grunt) {
	grunt.registerTask('createResourcesJson', 'Create Resources.json file', function() {
        //get tasks configured options or set default if not exists
        var originOptions = this.options(getGruntConfiguredOptions(grunt));
        var _options = getTaskOptions(originOptions);

        if (validateTaskOptions(grunt, this, _options)) {
            createResourceJson(_options.src, _options.dest);
        }
	});
}
