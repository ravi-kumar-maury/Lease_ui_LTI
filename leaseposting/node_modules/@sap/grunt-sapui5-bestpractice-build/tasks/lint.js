var fs = require('fs');
var path = require('path');
var coreLibs = require('@sap/di.code-validation.core');
var fileUtils = coreLibs.fileUtils;
var jsValidator = requireIfExists('@sap/di.code-validation.js');
var xmlValidator = requireIfExists('@sap/di.code-validation.xml');
var jsonValidator = requireIfExists('@sap/di.code-validation.json');

function module_exists(moduleName) {
    try {
        return require.resolve(moduleName);
    } catch(e) {
        return false;
    }
}

function requireIfExists(validatorPackageName) {
    if (module_exists(validatorPackageName)) {
        return require(validatorPackageName);
    }
}

function handleResults(grunt, results){
    var result = results || {};
    var issues = result.issues || [];
    var allIssues = {};
    var projectPath = grunt.config.get('dir.projectRoot');
    issues.forEach(function (issue) {
        var filePath = issue.path;

        var resultPath = path.relative(projectPath, filePath);
        issue.path = resultPath;
        allIssues[resultPath] = allIssues[resultPath] || [];
        allIssues[resultPath] = allIssues[resultPath].concat(issue);
    });
    return {"issues": allIssues};

}

function lint_xml(grunt, allResults) {
    if (xmlValidator) {
        try {
            var projectPath = grunt.config.get('dir.projectRoot');
            var validationMetadata = new coreLibs.validationMetadata(projectPath);
            var results = xmlValidator.validateFiles(validationMetadata);
            var fixed = handleResults(grunt, results);
            allResults['@sap/di.code-validation.xml'] = fixed;
            return true;
        } catch(e) {
            grunt.log.error('failed xml validation ' + e.message);
            return false;
        }
    } else {
        grunt.log.writeln('@sap/di.code-validation.xml not installed');
        return true;
    }
}

function lint_js(grunt, allResults) {
    if (jsValidator) {
        try {
            var projectPath = grunt.config.get('dir.projectRoot');
            var validationMetadata = new coreLibs.validationMetadata(projectPath);
            var results = jsValidator.validateFiles(validationMetadata);
            var fixed = handleResults(grunt, results);
            allResults['@sap/di.code-validation.js'] = fixed;
            return true;
        } catch(e) {
            grunt.log.error('failed js validation ' + e.message);
            return false;
        }
    } else {
        grunt.log.writeln('@sap/di.code-validation.js not installed');
        return true;
    }
}

function lint_json(grunt, allResults, cb_done) {
    if (jsonValidator) {
        var projectPath = grunt.config.get('dir.projectRoot');
        var distDir = grunt.config.get('dir.dist');
        var validationMetadata = new coreLibs.validationMetadata(projectPath);
        fileUtils.listFilteredFiles(validationMetadata.getRootPath(), {
            extensions: [".json"],
            ignoredPaths: [path.join(projectPath, 'node_modules'), distDir]
        }, function (files) {
            var fileResources = [];
            files.forEach(function (filePath) {
                var fileResource = new coreLibs.fileResource(validationMetadata.getRootPath(), filePath);
                fileResources.push(fileResource);
            });
            return jsonValidator.validateFiles(validationMetadata, fileResources)
                .then(function (results) {
                    var fixed = handleResults(grunt, results);
                    allResults['@sap/di.code-validation.json'] = fixed;
                    cb_done();
                }).fail(function(e) {
                    grunt.log.error('failed json validation ' + e.message);
                    cb_done(false);
                });
        });
    } else {
        grunt.log.writeln('@sap/di.code-validation.json not installed');
        cb_done();
    }
}

module.exports = function(grunt) {
    var projectPath = grunt.config.get('dir.projectRoot');
    var distDir = grunt.config.get('dir.dist');
    grunt.log.writeln('distDir' + distDir);

    if (!projectPath || !distDir) {
        grunt.log.writeln('missing projectPath or dist folder information. skipping lint task');
        return;
    }

    var allResults = {};
    grunt.registerTask('lint-js', function () {
        return lint_js(grunt, allResults);
    });

    grunt.registerTask('lint-xml', function () {
        return lint_xml(grunt, allResults);
    });

    grunt.registerTask('lint-json', function () {
        var done = this.async();
        lint_json(grunt, allResults, done);
    });

    grunt.registerTask('lint', 'lint project', function () {
        grunt.registerTask('writeLintResults', function () {
            try {
                //var results = handleResults(grunt, allResults);
                var fullRestuls = {version: "1.0.0", "results": allResults};
                fs.writeFileSync(path.join(distDir, "di.code-validation.core_issues.json"), JSON.stringify(fullRestuls));
                return true;
            } catch(e) {
                grunt.log.error('failed linting ' + e.message);
                return false;
            }
        });
        grunt.task.run('mkdir:dist', 'lint-js', 'lint-xml', 'lint-json', 'writeLintResults');

    });	// Linting task

}