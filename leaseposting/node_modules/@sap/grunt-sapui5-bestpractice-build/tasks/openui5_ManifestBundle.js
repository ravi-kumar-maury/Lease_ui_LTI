'use strict';

var fs = require('fs');
var path = require('path');
var archiver = require('archiver');

function createManifestBundle(appFolder, distFolder) {

    return new Promise(function(resolve, reject) {
        // only create a bundle if a manifest.json exists
        if (!fs.existsSync(appFolder)) {
            resolve("Application folder not found! Skipping the execution...");
            return; // exit the function to not run the ZIP logic
        }

        // only create a bundle if a manifest.json exists
        if (!fs.existsSync(path.join(appFolder, "manifest.json"))) {
            resolve("No manifest.json found! Skipping the execution...");
            return; // exit the function to not run the ZIP logic
        }

        // create a file to stream archive data to.
        if (!fs.existsSync(distFolder)) {
            fs.mkdirSync(distFolder);
        }
        var output = fs.createWriteStream(path.join(distFolder, "manifest-bundle.zip"));

        // listen to the end event once the stream is drained
        output.on('finish', () => {
            //grunt.log.writeln("Created manifest-bundle.zip (" + archive.pointer() + " total bytes)");
            resolve();
        });

        // listen to the error event to report the error
        output.on('error', (err) => {
            //grunt.log.warn("Failed to create the manifest-bundle.zip!");
            reject(err);
        });

        // create the archive handler
        var archive = archiver('zip', {
            zlib: { level: 9 } // Sets the compression level.
        });

        // pipe archive data to the file
        archive.pipe(output);

        // append files from a glob pattern from the webapp folder
        var options = {
            cwd: appFolder
        }
        archive.glob('**/manifest.json', options);
        archive.glob('**/*.properties', options);

        // finalize the archive
        archive.finalize();

    });

}

function validateTaskOptions(grunt, task, taskOptions) {
    if (!taskOptions.src) {
        grunt.log.error(task.name + ' missing src configuration');
        return false;
    }
    if (!taskOptions.dest) {
        grunt.log.error(task.name + ' missing dest configuration');
        return false;
    }
    return true;
}

function getGruntConfiguredOptions(grunt) {
    return {
        src: grunt.config.get('dir.appFolder'),
        dest: grunt.config.get('dir.dist')
    }
}

module.exports = function(grunt) {

    grunt.registerTask("createManifestBundle", "Task to bundle the manifest and i18n resources.", function() {
        var done = this.async();
        //get tasks configured options or set default if not exists
        var originOptions = this.options(getGruntConfiguredOptions(grunt));
        var _options = originOptions;

        if (validateTaskOptions(grunt, this, _options) ) {
            createManifestBundle(_options.src, _options.dest).then(function (message) {
                if (message) {
                    grunt.log.writeln(message);
                }
                done();
            }).catch(function (err) {
                done(err);
            });
        } else {
            done();
        }
    });

}
