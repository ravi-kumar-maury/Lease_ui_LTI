'use strict';
var path = require('path');

// root
const APP_ROOT = "webapp";

// unit test consts
const MAIN_UNIT_TEST_FILE_NAME = "AllTests";
const UNIT_TEST_PATH = path.join("test", "unit");

// integration tests consts
const MAIN_INTEGRATION_TEST_FILE_NAME = "AllJourneys";
const INTEGRATION_TEST_PATH = path.join("test", "integration");

function isTestFilesExist(grunt){
    // verify that we have the AllJourneys and AllTests files. if they do not exist -> do not fail the build
    var pathToMainUnitTestFile = path.join(APP_ROOT, UNIT_TEST_PATH, `${MAIN_UNIT_TEST_FILE_NAME}.js`);
    var pathToMainIntegrationTestFile = path.join(APP_ROOT, INTEGRATION_TEST_PATH, `${MAIN_INTEGRATION_TEST_FILE_NAME}.js`);
    if (!grunt.file.exists(pathToMainUnitTestFile) || !grunt.file.exists(pathToMainIntegrationTestFile)){
        grunt.log.writeln("webapp/test/integration/AllJourneys.js or webapp/test/unit/AllTests.js does not exist. The test task will stop and will not fail the build");
        return false;
    }

    return true;
}

function getUi5Url(grunt) {
    var ui5version = grunt.config.get('ui5version');
    var ui5VersionType = grunt.config.get('ui5VersionType');

    var versionRegExp = /^\d+(\.\d+)(\.\d+)$/;
    var ui5BaseURL = 'https://sapui5.hana.ondemand.com';
    if (ui5VersionType && typeof ui5VersionType === 'string') {
        if (ui5VersionType.toLowerCase() === 'snapshot') {
            ui5BaseURL = 'https://sapui5nightly.int.sap.hana.ondemand.com';
        } 
    }
    if (ui5version && typeof ui5version === 'string') {
        if (versionRegExp.test(ui5version)) {
            return ui5BaseURL + '/' + ui5version;
        } else {
            grunt.fail.warn('Invalid ui5version configured ' + ui5version);
        }
    }
    return ui5BaseURL;
}

function addCoverageThreshold(grunt) {
    var remote_coverage_threshold = grunt.config.get('coverage_threshold');
    if (!remote_coverage_threshold){
        return;
    }

    grunt.config.merge({
        karma : {
            ci : {
                coverageReporter : {
                    check : {
                        each : remote_coverage_threshold
                    }
                }
            }
        }
    });
}

function addKarmaToConfig(grunt) {
    var resourceroots = getAppId(grunt); // xxx.ui5
    var resourcerootsDir = resourceroots.replace(/\./g, "/");  // xxx/ui5

    var coverage_threshold = grunt.config.get('default_coverage_threshold');
    var custom_ui5 = getUi5Url(grunt);

    //add Karma to config
    grunt.config("karma", {
        options: {
            browserNoActivityTimeout: 25000,
            basePath: APP_ROOT,
            frameworks: ['qunit', 'openui5'],
            openui5: {
                path: custom_ui5 + '/resources/sap-ui-core.js'
            },
            client: {
                openui5: {
                    config: {
                        theme: 'sap_belize',
                        language: 'EN',
                        bindingSyntax: 'complex',
                        compatVersion: 'edge',
                        preload: 'async',
                        resourceroots: { [resourceroots] : './base'}  // resourceroots: {'xxx.ui5': './base'}
                    },
                    tests: [
                        `${resourcerootsDir}/${UNIT_TEST_PATH}/${MAIN_UNIT_TEST_FILE_NAME}`,               // 'xxx/ui5/test/unit/AllTests',
                        `${resourcerootsDir}/${INTEGRATION_TEST_PATH}/${MAIN_INTEGRATION_TEST_FILE_NAME}`  // 'xxx/ui5/test/integration/AllJourneys'
                    ]
                }
            },
            files: [
                { pattern: '**', included: false, served: true, watched: true }
            ],
            proxies: {
                '/resources': {
                    'target': '/base/resources',
                    'changeOrigin': true
                },
                '/test-resources': {
                    'target': '/base/test-resources',
                    'changeOrigin': true
                },
                '/base/resources': {
                    'target': custom_ui5 + '/resources',
                    'changeOrigin': true
                },
                '/base/test-resources': {
                    'target': custom_ui5 + '/test-resources',
                    'changeOrigin': true
                }
            },
            reporters: ['progress'],
            port: 9876,
            logLevel: 'INFO',
            browserConsoleLogOptions: {
                level: 'warn'
            },
            browsers: ['Chrome']
        },
        ci: {
            singleRun: true,
            browsers: ['ChromeHeadless'],
            preprocessors: {
                '{webapp/*.js,webapp/!(test)/**/*.js}': ['coverage']
            },
            coverageReporter: {
                includeAllSources: true,
                reporters: [
                    {
                        type: 'html',
                        dir: '../coverage/'
                    },
                    {
                        type: 'text'
                    }
                ],
                check: {
                    each: coverage_threshold
                }
            },
            reporters: ['progress', 'coverage']
        },
        watch: {
            client: {
                clearContext: false,
                qunit: {
                    showUI: true
                }
            }
        },
        coverage: {
            singleRun: true,
            browsers: ['ChromeHeadless'],
            preprocessors: {
                '{webapp/*.js,webapp/!(test)/**/*.js}': ['coverage']
            },
            coverageReporter: {
                includeAllSources: true,
                reporters: [
                    {
                        type: 'html',
                        dir: '../coverage/'
                    },
                    {
                        type: 'text'
                    }
                ]
            },
            reporters: ['progress', 'coverage']
        }
    });
}

// returns the app id i.e. xxx.ui5
function getAppId(grunt){
    var sComponentFile = "webapp/Component.js";
    if (grunt.file.exists(sComponentFile)){
        var fileContent = grunt.file.read(sComponentFile);
        var sReg  = '.extend\\(\\"(.*).';
        var oRegex = new RegExp(sReg + 'Component\\"');
        var aMatches = oRegex.exec(fileContent);
        if (aMatches) {
            var sRes = aMatches[1];
            //sRes = sRes.replace(/\./g, "/");
            return sRes;
        }
    }
    else {
        grunt.fail.warn('Test Task failed due to no Component.js in the project.');
    }
};

function isProceedWithTask(grunt){
    if (!isTestFilesExist(grunt)){
        // files does not exist
        return false; // do not fail the build if AllJourneys.js or AllTests.js does not exist
    }
    return true;
}

module.exports = function(grunt) {


    grunt.config.merge({

        connect: {
            options: {
                port: 8080,
                hostname: '*'
            },
            src: {},
            dist: {}
        },

        openui5_connect: {
            src: {
                options: {
                    appresources: 'webapp'
                }
            }
        },

        clean: {
            coverage: 'coverage'
        },

        default_coverage_threshold :{
            statements: 100,
            branches: 100,
            functions: 100,
            lines: 100
        }
    });

    // loadNpmTasks
    grunt.loadNpmTasks('grunt-contrib-connect');
    grunt.loadNpmTasks('grunt-contrib-clean');
    grunt.loadNpmTasks('grunt-openui5');
    grunt.loadNpmTasks('grunt-karma');

    addKarmaToConfig(grunt);

    grunt.registerTask('test', 'Run unit and integration tests with coverage', function () {
        if (!isProceedWithTask(grunt)){
            return; // do not fail the build if  AllJourneys.js or AllTests.js does not exist
        } else {
            // Configuration for threshold can be merged in a simplified way.
            addCoverageThreshold(grunt);
        }

        // run the tests + covarage
        grunt.task.run([
            'clean:coverage',
            'openui5_connect:src',
            'karma:ci'
        ]);
    });	// test task

    grunt.registerTask('watch', 'Debug unit and integration tests', function () {
        if (!isProceedWithTask(grunt)){
            return; // do not fail the build if  AllJourneys.js or AllTests.js does not exist
        } else {
            // Configuration for threshold can be merged in a simplified way.
            addCoverageThreshold(grunt);
        }

        // debug the tests
        grunt.task.run([
            'openui5_connect:src',
            'karma:watch'
        ]);
    });	// watch task

    grunt.registerTask('coverage', 'Run coverage', function () {
        if (!isProceedWithTask(grunt)){
            return; // do not fail the build if  AllJourneys.js or AllTests.js does not exist
        } else {
            // Configuration for threshold can be merged in a simplified way.
            addCoverageThreshold(grunt);
        }

        // debug the tests
        grunt.task.run([
            'clean:coverage',
            'openui5_connect:src',
            'karma:coverage'
        ]);
    });	// coverage task

};
